var express = require('express');
var app = express();
var path = require("path");
var fs = require("fs");
var async = require("async");

var express = require("express");
var bodyParser = require("body-parser");
var path = require("path");
var app = express();

// DB expressions
var sqlite3 = require('sqlite3').verbose();
var db = new sqlite3.Database('klidata.db3');

app.use(bodyParser.json({
    limit: '50mb'
}));

app.use(bodyParser.urlencoded({
    limit: '50mb',
    extended: true,
    parameterLimit: 50000
}));

app.use(express.static(path.join(__dirname, 'static'))); // __dirname is always root verzeichnis #denglisch





app.get('**/*.js', function (req, res) {
    // res.send('Hello World!');
    // so wird node.js zum http-Server
    try {
        var path1 = req.path;
        var path1a = path.dirname(req.path);
        var modulename = path1.substr(path1a.length);
        var path2 = path.join("/apps/re-klima/", modulename);
        if (req.path === "/gif.worker.js") {
            var p0 = path.join(__dirname, "static");
            p0 = path.join(p0, "lib");
            p0 = path.join(p0, req.path);
            res.sendFile(p0);
        } else if (fs.existsSync(path.join(__dirname, req.path))) {
            //res.sendFile(path.resolve(req.path));
            res.sendFile(path.join(__dirname, req.path));
        } else if (fs.existsSync(path.join(__dirname, path2))) {
            //res.sendFile(path.resolve("apps" + req.path));
            var p = path.join(__dirname, path2);
            res.sendFile(p);
        } else {
            res.send('{}');
        }
    } catch (err) {
        res.send('{}');
    }
    return;
});



app.get('/', function (req, res) {
    // res.send('Hello World!');
    // so wird node.js zum http-Server
    res.sendFile(path.resolve("static/index.html"));
    return;
});

app.listen(3000, function () {
    console.log('Example app listening on port 3000!');
});

/**
 * dir2tree - Auflösung Verzeichnis 
 * @param {*} dir - Vorgabe des Verzeichnisses, das aufzulösen ist
 * @param {*} parobj - Objekt, das dem Verzeichnis entspricht, in diesem Objekt werden die children versorgt
 * @param {*} filetree - Gesamthafter Filetree für das UI, wird als return verwendet (s.u.)
 * returns filetree
 * {
        id          : "string" // will be autogenerated if omitted
        text        : "string" // node text
        icon        : "string" // string for custom
        state       : {
            opened    : boolean  // is the node open
            disabled  : boolean  // is the node disabled
            selected  : boolean  // is the node selected
        },
        children    : []  // array of strings or objects
        li_attr     : {}  // attributes for the generated LI node
        a_attr      : {}  // attributes for the generated A node
   }
 */
// https://stackoverflow.com/questions/50121881/node-js-recursively-list-full-path-of-files
function dir2tree(dir, parobj, filetree) {
    fs.readdirSync(dir).forEach(function (file) {
        var fullPath = path.join(dir, file);
        if (fs.lstatSync(fullPath).isDirectory()) {
            console.log(fullPath);
            var newobj = {
                text: file,
                state: {
                    selected: false
                },
                a_attr: {
                    fullpath: fullPath
                },
                children: []
            };
            parobj.children.push(newobj);
            filetree = dir2tree(fullPath, newobj, filetree);
        } else {
            console.log(fullPath);
            var newfile = {
                text: file,
                icon: "jstree-file",
                state: {
                    selected: false
                },
                a_attr: {
                    fullpath: fullPath
                }
            };
            parobj.children.push(newfile);
        }
    });
    return filetree;
}
